1,2,3
[1, 2, 3]

3…12
*[3, 4, 5, 6, 7, 8, 9, 10, 11]

{a:1, b:"hey"}::properties()
*{"a":1, "b":"hey"}

0,1,2,3,4,5,6,7,8,9,10[3:7]
*[3, 4, 5, 6]

3…7
*[3, 4, 5, 6]

0…21.chunk(5)
*[Map{0:0, 1:1, 2:2, 3:3, 4:4}, Map{5:5, 6:6, 7:7, 8:8, 9:9}, Map{10:10, 11:11, 12:12, 13:13, 14:14}, Map{15:15, 16:16, 17:17, 18:18, 19:19}, Map{20:20}]

0…21.chunk(5).flatten().map(n²)
*{0:0, 1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64, 9:81, 10:100, 11:121, 12:144, 13:169, 14:196, 15:225, 16:256, 17:289, 18:324, 19:361, 20:400}

2…5.map(n²).map(n²).map(n²)
*[256, 6561, 65536]

[ 0, 1 ] '...0: 1'
[ 1, 4 ] '...1: 4'
[ 2, 9 ] '...2: 9'

KVN { key: 0, value: 1, n: 0 } '...0: 1'
KVN { key: 1, value: 4, n: 1 } '...1: 4'
KVN { key: 2, value: 9, n: 2 } '...2: 9'

GroupBy {
  1…10.map(n²).groupBy(n|2+n|3)
  *{2:*{6:36}, 1:*{2:4, 3:9, 4:16, 8:64, 9:81}, 0:*{1:1, 5:25, 7:49}}
  
  New group 0
    1:1 => group 0
  New group 1
    2:4 => group 1
    3:9 => group 1
    4:16 => group 1
    5:25 => group 0
  New group 2
    6:36 => group 2
    7:49 => group 0
    8:64 => group 1
    9:81 => group 1
  
  Map { 2 => [ 36 ], 1 => [ 4, 9, 16, 64, 81 ], 0 => [ 1, 25, 49 ] }
  Map { 2 => 36, 1 => 174, 0 => 75 }
  285
}

0..21.chunk(5).flatten().map(x²).keys()
0…21.chunk(5).flatten().map(n²).map(key).values()
*{0:0, 1:1, 2:2, 3:3, 4:4, 5:5, 6:6, 7:7, 8:8, 9:9, 10:10, 11:11, 12:12, 13:13, 14:14, 15:15, 16:16, 17:17, 18:18, 19:19, 20:20}

0..21.chunk(5).flatten().map(x²).values()
0…21.chunk(5).flatten().map(n²).values()
*{0:0, 1:1, 2:4, 3:9, 4:16, 5:25, 6:36, 7:49, 8:64, 9:81, 10:100, 11:121, 12:144, 13:169, 14:196, 15:225, 16:256, 17:289, 18:324, 19:361, 20:400}

0..21.chunk(5)[3]
15…20
*[15, 16, 17, 18, 19]

0…50.map(n²)[10:40].filter(n|2).filter(n|3).chunk(3)
*{0:Map{12:144, 18:324, 24:576}, 1:Map{30:900, 36:1296}}

[...].flattenDeep().collect(Array)
0,1,2,x,x1,y2,y2b,y2c,z3,z,wow
[0, 1, 2, "x", "x1", "y2", "y2b", "y2c", "z3", "z", "wow"]

fib.take( 10 )
0…Infinity.map(fibonacci).cache(Array)[0:10]
*[0, 1, 1, 2, 3, 5, 8, 13, 21, 34]

fib.takeWhile( x<100 )
0…Infinity.map(fibonacci).cache(Array).takeWhile(n<100)
*{0:0, 1:1, 2:1, 3:2, 4:3, 5:5, 6:8, 7:13, 8:21, 9:34, 10:55, 11:89}

fib.skipWhile( x<100 ).takeWhile( x<1000 )
0…Infinity.map(fibonacci).cache(Array).skipWhile(n<100).takeWhile(n<1000)
*{12:144, 13:233, 14:377, 15:610, 16:987}


5000000000 50000000005000000000
5
6
7
8
9
1
y
190392490709135
